pragma solidity ^0.8;
// SPDX-License-Identifier: MIT

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 *
 * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._
 */
contract ServerNft is
    Context,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable
{
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    struct Server {
        string manufacturer;
        string sn;
        string manufactureDate;
    }

    mapping(uint256 => Server) private _servers; // The token id maps to Server
    mapping(bytes32 => uint256) private _tokens; // keccak256(Server) map to token id

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     * - the server id, keccak256(manufacturer, sn, manu_date), doesn't exist
     */
    function mint(
        address to,
        string memory manufacturer,
        string memory sn,
        string memory manu_date
    ) public virtual {
        require(
            hasRole(MINTER_ROLE, _msgSender()),
            "ServerNft: must have minter role to mint"
        );

        require(
            bytes(manufacturer).length > 0 && bytes(manufacturer).length < 16,
            "The lenth of manufacturer is 0 or more than 16"
        );
        require(
            bytes(sn).length > 0 && bytes(sn).length < 16,
            "The lenth of SN is 0 or more than 16"
        );
        require(
            bytes(manu_date).length > 0 && bytes(manu_date).length < 16,
            "The lenth of manufacturer is 0 or more than 16"
        );

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        bytes32 server_id = keccak256(
            abi.encodePacked(manufacturer, sn, manu_date)
        );

        require(_tokens[server_id] == 0, "The server id has already existed.");

        //if(token_id)
        //require(bytes(_servers[token_id].sn).length == 0, "The server id has alrady existed");

        // The token id starts at 1 .
        uint256 token_id = _tokenIdTracker.current() + 1;

        // Map the server id to token id
        _tokens[server_id] = token_id;

        // Map the token id to Server
        _servers[token_id] = Server({
            manufacturer: manufacturer,
            sn: sn,
            manufactureDate: manu_date
        });

        _mint(to, token_id);

        _tokenIdTracker.increment();
    }

    function minted_amount() public view returns (uint256) {
        return _tokenIdTracker.current();
    }

    function get_token_id(
        string memory manufacturer,
        string memory sn,
        string memory manu_date
    ) public view returns (uint256) {
        bytes32 server_id = keccak256(
            abi.encodePacked(manufacturer, sn, manu_date)
        );

        return _tokens[server_id];
    }

    function get_server(uint256 token_id) public view returns (Server memory) {
        return _servers[token_id];
    }
    
    /**
     * @dev Pauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to pause"
        );
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {ERC721Pausable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual {
        require(
            hasRole(PAUSER_ROLE, _msgSender()),
            "ERC721PresetMinterPauserAutoId: must have pauser role to unpause"
        );
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
